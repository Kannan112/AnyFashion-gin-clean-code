definitions:
  req.AddAddress:
    properties:
      city:
        type: string
      district:
        type: string
      house_number:
        type: string
      isdefault:
        type: boolean
      landmark:
        type: string
      pincode:
        type: integer
      street:
        type: string
    required:
    - city
    - district
    - house_number
    - landmark
    - pincode
    - street
    type: object
  req.BlockData:
    properties:
      reason:
        type: string
      userid:
        type: integer
    required:
    - reason
    - userid
    type: object
  req.Category:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  req.Coupons:
    properties:
      code:
        type: string
      discountmaximumamount:
        type: number
      discountpercent:
        type: number
      expirationdate:
        type: string
      minimumpurchaseamount:
        type: number
    type: object
  req.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  req.OTPData:
    properties:
      phoneNumber:
        type: string
    type: object
  req.Otpverifier:
    properties:
      phoneNumber:
        type: string
      pin:
        type: string
    required:
    - phoneNumber
    - pin
    type: object
  req.Product:
    properties:
      brand:
        type: string
      categoryid:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - brand
    - categoryid
    - description
    - name
    type: object
  req.UpdateCoupon:
    properties:
      discountmaximumamount:
        type: number
      discountpercent:
        type: number
      expirationdate:
        type: string
      minimumpurchaseamount:
        type: number
    type: object
  req.UserReq:
    properties:
      email:
        type: string
      mobile:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - mobile
    - name
    type: object
  res.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      stastuscode:
        type: integer
    type: object
info:
  contact: {}
paths:
  /admin/adminlogin:
    post:
      consumes:
      - application/json
      description: Logs in an admin user and returns an authentication token
      parameters:
      - description: Admin login details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/req.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin Login
      tags:
      - Admin
  /admin/category/add:
    post:
      consumes:
      - application/json
      description: Admin can create new category from admin panel
      operationId: create-category
      parameters:
      - description: New category name
        in: body
        name: category_name
        required: true
        schema:
          $ref: '#/definitions/req.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Create new product category
      tags:
      - Product Category
  /admin/category/delete/{category_id}:
    delete:
      consumes:
      - application/json
      description: Admin can delete a category
      operationId: delete-category
      parameters:
      - description: category_id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin can delete a category
      tags:
      - Product Category
  /admin/category/find/{id}:
    get:
      consumes:
      - application/json
      description: Users and admins can fetch details of a specific category using
        id
      operationId: display-category
      parameters:
      - description: category id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/res.Response'
      summary: Fetch details of a specific category using category id
      tags:
      - Product Category
  /admin/category/listall:
    get:
      consumes:
      - application/json
      description: Admin, users and unregistered users can see all the available categories
      operationId: view-all-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: View all available categories
      tags:
      - Product Category
  /admin/category/update/{id}:
    patch:
      consumes:
      - application/json
      description: Admin can update category details
      operationId: update-category
      parameters:
      - description: ID of the Category to be updated
        in: path
        name: id
        required: true
        type: string
      - description: category info
        in: body
        name: category_details
        required: true
        schema:
          $ref: '#/definitions/req.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin can update category details
      tags:
      - Product Category
  /admin/coupon:
    get:
      consumes:
      - application/json
      description: Admins and users can see all available coupons
      operationId: view-coupons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admins and users can see all available coupons
      tags:
      - Coupon
  /admin/coupon/add:
    post:
      consumes:
      - application/json
      description: Admin can create new coupons
      operationId: create-coupon
      parameters:
      - description: details of new coupon to be created
        in: body
        name: new_coupon_details
        required: true
        schema:
          $ref: '#/definitions/req.Coupons'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin can create new coupon
      tags:
      - Coupon
  /admin/coupon/update/{couponId}:
    patch:
      consumes:
      - application/json
      description: admin coupon update
      operationId: UpdateCoupon
      parameters:
      - description: Coupon ID
        in: path
        name: couponId
        required: true
        type: string
      - description: New Admin details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/req.UpdateCoupon'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Update a existing coupon
      tags:
      - Coupon
  /admin/dashbord/list:
    get:
      consumes:
      - application/json
      description: Admin can access dashboard and view details regarding orders, products,
        etc.
      operationId: admin-dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin Dashboard
      tags:
      - Admin
  /admin/product/add:
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin user to create a new product item.
      operationId: add-product
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/req.Product'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added new product item
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Failed to add new product item
          schema:
            $ref: '#/definitions/res.Response'
      summary: Creates a new produc
      tags:
      - Product
  /admin/product/update/{id}:
    patch:
      consumes:
      - application/json
      description: updating exsisting product details.
      operationId: update-product
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/req.Product'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added new product item
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Failed to add new product item
          schema:
            $ref: '#/definitions/res.Response'
      summary: Update product
      tags:
      - Product
  /admin/salesreport/download:
    get:
      consumes:
      - application/json
      description: Admin can download sales report in .csv format
      operationId: download-sales-report
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin can download sales report
      tags:
      - Admin
  /admin/user/block:
    patch:
      consumes:
      - application/json
      description: admin block user access to the store
      parameters:
      - description: User bolocking details
        in: body
        name: blocking_details
        required: true
        schema:
          $ref: '#/definitions/req.BlockData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin BlockUser
      tags:
      - Admin
  /admin/user/unblock/{user_id}:
    patch:
      consumes:
      - application/json
      description: Admins can block users
      operationId: unblock-users
      parameters:
      - description: ID of the user to be blocked
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin can unbolock a blocked user
      tags:
      - Admin
  /user/address/add:
    post:
      consumes:
      - application/json
      description: Login as a user to access the ecommerce site
      operationId: add-address
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.AddAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Add Address
      tags:
      - Address
  /user/address/delete/{addressId}:
    delete:
      consumes:
      - application/json
      description: user can delete any of his addresses
      operationId: delete-address
      parameters:
      - description: addressId
        in: path
        name: addressId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Delete Address
      tags:
      - Address
  /user/address/list:
    get:
      consumes:
      - application/json
      description: Login as a user to access the ecommerce site
      operationId: list-all-addresses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: List Addresses
      tags:
      - Address
  /user/address/update/{addressId}:
    patch:
      consumes:
      - application/json
      description: user update addresses
      operationId: update-address
      parameters:
      - description: addressId
        in: path
        name: addressId
        required: true
        type: string
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.AddAddress'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Update Address
      tags:
      - Address
  /user/cart/add/:product_item_id:
    post:
      consumes:
      - application/json
      description: User can add product item to the cart
      operationId: add-to-cart
      parameters:
      - description: product_item_id
        in: path
        name: product-items-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: User add product-item to cart
      tags:
      - Cart
  /user/login:
    post:
      consumes:
      - application/json
      description: Login as a user to access the ecommerce site
      operationId: UserLogin
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: User Login
      tags:
      - Users
  /user/logout:
    get:
      consumes:
      - application/json
      description: User logout to access the ecommerce site
      operationId: UserLogout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: User Logout
      tags:
      - Users
  /user/otp/send:
    post:
      consumes:
      - application/json
      description: Send OTP to use's mobile
      operationId: send-otp
      parameters:
      - description: User mobile number
        in: body
        name: user_mobile
        required: true
        schema:
          $ref: '#/definitions/req.OTPData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Send OTP to user's mobile
      tags:
      - Otp
  /user/otp/verify:
    post:
      consumes:
      - application/json
      description: Validate the  OTP sent to use's mobile
      operationId: validate-otp
      parameters:
      - description: OTP sent to user's mobile number
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/req.Otpverifier'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Validate the OTP to user's mobile
      tags:
      - Otp
  /user/profile/edit:
    patch:
      consumes:
      - application/json
      description: Edit user prodile ecommerce site
      operationId: EditProfile
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/req.UserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Edit Profile
      tags:
      - Profile
  /user/profile/view:
    get:
      consumes:
      - application/json
      description: Login as a user to access the ecommerce site
      operationId: ViewProfile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: View Profile
      tags:
      - Profile
  /user/signup:
    post:
      consumes:
      - application/json
      description: Signup as a new user to access the ecommerce site
      operationId: UserSignUp
      parameters:
      - description: User details
        in: body
        name: user_details
        required: true
        schema:
          $ref: '#/definitions/req.UserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: user-signup
      tags:
      - Users
  /user/wallet:
    get:
      consumes:
      - application/json
      description: user wallet displays super-coins
      operationId: wallet-profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Wallet Profile
      tags:
      - Profile-wallet
  /user/wallet/apply:
    post:
      consumes:
      - application/json
      description: user can add wallet coins to the cart
      operationId: apply-wallet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Wallet Profile
      tags:
      - Profile-wallet
  /user/wallet/remove:
    patch:
      consumes:
      - application/json
      description: user can add wallet coins to the cart
      operationId: remove-wallet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Wallet Profile
      tags:
      - Profile-wallet
  /user/wishlist/add/{itemId}:
    post:
      consumes:
      - application/json
      description: Login as a user to access the ecommerce site
      operationId: AddToWishlist
      parameters:
      - description: itemId
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Add Wishlist
      tags:
      - Wishlist
  /user/wishlist/remove/{itemId}:
    delete:
      consumes:
      - application/json
      description: Remove item from wishlist
      operationId: RemoveFromWishlis
      parameters:
      - description: itemId
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Remove Item
      tags:
      - Wishlist
swagger: "2.0"
