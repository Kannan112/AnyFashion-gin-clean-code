// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/cart.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	req "github.com/kannan112/go-gin-clean-arch/pkg/common/req"
	res "github.com/kannan112/go-gin-clean-arch/pkg/common/res"
	domain "github.com/kannan112/go-gin-clean-arch/pkg/domain"
)

// MockCartUseCases is a mock of CartUseCases interface.
type MockCartUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockCartUseCasesMockRecorder
}

// MockCartUseCasesMockRecorder is the mock recorder for MockCartUseCases.
type MockCartUseCasesMockRecorder struct {
	mock *MockCartUseCases
}

// NewMockCartUseCases creates a new mock instance.
func NewMockCartUseCases(ctrl *gomock.Controller) *MockCartUseCases {
	mock := &MockCartUseCases{ctrl: ctrl}
	mock.recorder = &MockCartUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUseCases) EXPECT() *MockCartUseCasesMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartUseCases) AddToCart(productId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", productId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartUseCasesMockRecorder) AddToCart(productId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartUseCases)(nil).AddToCart), productId, userId)
}

// CreateCart mocks base method.
func (m *MockCartUseCases) CreateCart(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartUseCasesMockRecorder) CreateCart(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartUseCases)(nil).CreateCart), id)
}

// ListCart mocks base method.
func (m *MockCartUseCases) ListCart(userId int) ([]domain.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCart", userId)
	ret0, _ := ret[0].([]domain.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCart indicates an expected call of ListCart.
func (mr *MockCartUseCasesMockRecorder) ListCart(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCart", reflect.TypeOf((*MockCartUseCases)(nil).ListCart), userId)
}

// ListCartItems mocks base method.
func (m *MockCartUseCases) ListCartItems(ctx context.Context, userId int, pagenation req.Pagenation) ([]res.Display, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartItems", ctx, userId, pagenation)
	ret0, _ := ret[0].([]res.Display)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartItems indicates an expected call of ListCartItems.
func (mr *MockCartUseCasesMockRecorder) ListCartItems(ctx, userId, pagenation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartItems", reflect.TypeOf((*MockCartUseCases)(nil).ListCartItems), ctx, userId, pagenation)
}

// RemoveFromCart mocks base method.
func (m *MockCartUseCases) RemoveFromCart(productId, UserId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", productId, UserId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartUseCasesMockRecorder) RemoveFromCart(productId, UserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartUseCases)(nil).RemoveFromCart), productId, UserId)
}
