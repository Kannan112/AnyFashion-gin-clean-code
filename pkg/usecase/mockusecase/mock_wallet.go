// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/wallet.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	res "github.com/kannan112/go-gin-clean-arch/pkg/common/res"
)

// MockWalletUseCase is a mock of WalletUseCase interface.
type MockWalletUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockWalletUseCaseMockRecorder
}

// MockWalletUseCaseMockRecorder is the mock recorder for MockWalletUseCase.
type MockWalletUseCaseMockRecorder struct {
	mock *MockWalletUseCase
}

// NewMockWalletUseCase creates a new mock instance.
func NewMockWalletUseCase(ctrl *gomock.Controller) *MockWalletUseCase {
	mock := &MockWalletUseCase{ctrl: ctrl}
	mock.recorder = &MockWalletUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletUseCase) EXPECT() *MockWalletUseCaseMockRecorder {
	return m.recorder
}

// AddCoinToWallet mocks base method.
func (m *MockWalletUseCase) AddCoinToWallet(ctx context.Context, price float32, usersId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoinToWallet", ctx, price, usersId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoinToWallet indicates an expected call of AddCoinToWallet.
func (mr *MockWalletUseCaseMockRecorder) AddCoinToWallet(ctx, price, usersId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoinToWallet", reflect.TypeOf((*MockWalletUseCase)(nil).AddCoinToWallet), ctx, price, usersId)
}

// ApplyWallet mocks base method.
func (m *MockWalletUseCase) ApplyWallet(ctx context.Context, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyWallet", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyWallet indicates an expected call of ApplyWallet.
func (mr *MockWalletUseCaseMockRecorder) ApplyWallet(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyWallet", reflect.TypeOf((*MockWalletUseCase)(nil).ApplyWallet), ctx, userId)
}

// GetWalletProfile mocks base method.
func (m *MockWalletUseCase) GetWalletProfile(ctx context.Context, userID uint) (res.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletProfile", ctx, userID)
	ret0, _ := ret[0].(res.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletProfile indicates an expected call of GetWalletProfile.
func (mr *MockWalletUseCaseMockRecorder) GetWalletProfile(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletProfile", reflect.TypeOf((*MockWalletUseCase)(nil).GetWalletProfile), ctx, userID)
}

// RemoveWallet mocks base method.
func (m *MockWalletUseCase) RemoveWallet(ctx context.Context, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWallet", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWallet indicates an expected call of RemoveWallet.
func (mr *MockWalletUseCaseMockRecorder) RemoveWallet(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWallet", reflect.TypeOf((*MockWalletUseCase)(nil).RemoveWallet), ctx, userId)
}

// SaveWallet mocks base method.
func (m *MockWalletUseCase) SaveWallet(ctx context.Context, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWallet", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWallet indicates an expected call of SaveWallet.
func (mr *MockWalletUseCaseMockRecorder) SaveWallet(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWallet", reflect.TypeOf((*MockWalletUseCase)(nil).SaveWallet), ctx, userId)
}
