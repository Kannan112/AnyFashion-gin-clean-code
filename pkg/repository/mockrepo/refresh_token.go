// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/refresh_token.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRefreshTokenRepository is a mock of RefreshTokenRepository interface.
type MockRefreshTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenRepositoryMockRecorder
}

// MockRefreshTokenRepositoryMockRecorder is the mock recorder for MockRefreshTokenRepository.
type MockRefreshTokenRepositoryMockRecorder struct {
	mock *MockRefreshTokenRepository
}

// NewMockRefreshTokenRepository creates a new mock instance.
func NewMockRefreshTokenRepository(ctrl *gomock.Controller) *MockRefreshTokenRepository {
	mock := &MockRefreshTokenRepository{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenRepository) EXPECT() *MockRefreshTokenRepositoryMockRecorder {
	return m.recorder
}

// AdminFindRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) AdminFindRefreshToken(ctx context.Context, adminID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminFindRefreshToken", ctx, adminID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminFindRefreshToken indicates an expected call of AdminFindRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) AdminFindRefreshToken(ctx, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminFindRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).AdminFindRefreshToken), ctx, adminID)
}

// AdminRefreshTokenAdd mocks base method.
func (m *MockRefreshTokenRepository) AdminRefreshTokenAdd(token string, adminID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRefreshTokenAdd", token, adminID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminRefreshTokenAdd indicates an expected call of AdminRefreshTokenAdd.
func (mr *MockRefreshTokenRepositoryMockRecorder) AdminRefreshTokenAdd(token, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRefreshTokenAdd", reflect.TypeOf((*MockRefreshTokenRepository)(nil).AdminRefreshTokenAdd), token, adminID)
}

// UserFindRefreshToken mocks base method.
func (m *MockRefreshTokenRepository) UserFindRefreshToken(ctx context.Context, userID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserFindRefreshToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserFindRefreshToken indicates an expected call of UserFindRefreshToken.
func (mr *MockRefreshTokenRepositoryMockRecorder) UserFindRefreshToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserFindRefreshToken", reflect.TypeOf((*MockRefreshTokenRepository)(nil).UserFindRefreshToken), ctx, userID)
}

// UserRefreshTokenAdd mocks base method.
func (m *MockRefreshTokenRepository) UserRefreshTokenAdd(token string, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRefreshTokenAdd", token, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserRefreshTokenAdd indicates an expected call of UserRefreshTokenAdd.
func (mr *MockRefreshTokenRepositoryMockRecorder) UserRefreshTokenAdd(token, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRefreshTokenAdd", reflect.TypeOf((*MockRefreshTokenRepository)(nil).UserRefreshTokenAdd), token, userID)
}
